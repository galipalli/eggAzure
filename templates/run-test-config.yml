parameters:
- name: "serverURL"
- name: "testConfigID"
- name: "clientID"
  default: "client:dai:agent:integration"
- name: "clientSecret"
  default: ''
- name: "requestTimeout"
  default: 30
  type: number
- name: "requestRetries"
  default: 5
  type: number
- name: "backoffFactor"
  default: 0.5
  type: number
- name: "pollInterval"
  default: 5
  type: number
- name: "logLevel"
  default: "INFO"
- name: "CACertPath"
  default: ''
- name: "dryRun"
  default: false
  type: boolean
- name: "gitlabAccessToken"
  default: ''

steps:
    -
        pwsh: |
            if ($env:AGENT_OS -eq "Windows_NT") {
                $env:CLI_FILENAME="eggplant-runner-Windows-$env:DAI_VERSION.exe"
            }elseif ($env:AGENT_OS -eq "Linux") {
                $env:CLI_FILENAME="eggplant-runner-Linux-$env:DAI_VERSION"
            }elseif ($env:AGENT_OS -eq "Darwin") {
                $env:CLI_FILENAME="eggplant-runner-MacOS-$env:DAI_VERSION"
            }
            echo "##vso[task.setvariable variable=env:CLI_FILENAME]$env:CLI_FILENAME"
            
            echo "Runner OS is $env:AGENT_OS."
        env:
            DAI_VERSION: 6.1-ci
        name: Setup_environment_variables
        
    -
        pwsh: |
            if ("${{ parameters.gitlabAccessToken }}" -ne ''){
                # Engineering URL download
                $DOWNLOADURL = "https://gitlab.com/api/v4/projects/22402994/packages/generic/6.1-ci-cd/0.0.0/$(env:CLI_FILENAME)"
                echo "Downloading $DOWNLOADURL..."
                curl --header "PRIVATE-TOKEN: ${{ parameters.gitlabAccessToken }}" "$DOWNLOADURL" --output $(env:CLI_FILENAME)
            } else {
                # Public URL download
                $DOWNLOADURL = "https://downloads.eggplantsoftware.com/downloads/EggplantRunner/$(env:CLI_FILENAME)"
                echo "Downloading $DOWNLOADURL..."
                curl -L $DOWNLOADURL --output $(env:CLI_FILENAME)
            }
            
            echo "Downloaded $(env:CLI_FILENAME)."
        env:
            CLI_FILENAME: $(Setup_environment_variables.CLI_FILENAME)
        name: Download_CLI
        
    -
        pwsh: |
            chmod 0755 $(env:CLI_FILENAME)
        env:
            CLI_FILENAME: $(Setup_environment_variables.CLI_FILENAME)
        name: Set_permissions_on_CLI_executable
        
    -
        pwsh: |
            if ("${{ parameters.clientSecret }}" -ne '') {
                $env:DAI_CLIENT_SECRET="${{ parameters.clientSecret }}"
            }
            
            $CACertPath = ''
            if ("${{ parameters.CACertPath }}" -ne ''){
              $CACertPath = '--ca-cert-path="${{ parameters.CACertPath }}"'
            }
            
            $dryRun = ''
            if ("${{ parameters.dryRun }}" -eq $true){
              $dryRun = "--dry-run"
            }
            
            echo 'Executing: ./$(env:CLI_FILENAME) "${{ parameters.serverURL }}" "${{ parameters.testConfigID }}" --client-id="${{ parameters.clientID }}" --request-timeout=${{ parameters.requestTimeout }} --request-retries=${{ parameters.requestRetries }} --backoff-factor=${{ parameters.backoffFactor }} --poll-interval=${{ parameters.pollInterval }} --log-level="${{ parameters.logLevel }}"' $CACertPath $dryRun
            ./$(env:CLI_FILENAME) "${{ parameters.serverURL }}" "${{ parameters.testConfigID }}" --client-id="${{ parameters.clientID }}" --request-timeout=${{ parameters.requestTimeout }} --request-retries=${{ parameters.requestRetries }} --backoff-factor=${{ parameters.backoffFactor }} --poll-interval=${{ parameters.pollInterval }} --log-level="${{ parameters.logLevel }}" $CACertPath $dryRun
        env:
            CLI_FILENAME: $(Setup_environment_variables.CLI_FILENAME)
        name: Run_Test_Config
